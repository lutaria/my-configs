#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# open mpv
# cmd - m : open -na /Applications/mpv.app $(pbpaste)

# open applications
ctrl + cmd + alt - c : osascript ~/Scripts/chrome_new_window.scpt
ctrl + cmd + alt - s : osascript ~/Scripts/safari_new_window.scpt
ctrl + cmd + alt - v : osascript ~/Scripts/vscode_new_window.scpt
cmd - return : ~/Scripts/open_iterm2.sh

# focus window
alt - x : yabai -m window --focus recent
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north

# swap managed window
shift + alt - x : yabai -m window --swap recent
shift + alt - h : yabai -m window --swap west
shift + alt - l : yabai -m window --swap east
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# move managed window
shift + alt + cmd - x : yabai -m window --warp recent
shift + alt + cmd - h : yabai -m window --warp west
shift + alt + cmd - l : yabai -m window --warp east
shift + alt + cmd - j : yabai -m window --warp south
shift + alt + cmd - k : yabai -m window --warp north

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + ctrl - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"

# destroy desktop
shift + ctrl - q : yabai -m space --destroy

# fast focus desktop
ctrl - x : yabai -m space --focus recent
ctrl - l : yabai -m space --focus next 
ctrl - h : yabai -m space --focus prev
ctrl - 1 : yabai -m space --focus 1
ctrl - 2 : yabai -m space --focus 2
ctrl - 3 : yabai -m space --focus 3
ctrl - 4 : yabai -m space --focus 4
ctrl - 5 : yabai -m space --focus 5
ctrl - 6 : yabai -m space --focus 6
ctrl - 7 : yabai -m space --focus 7
ctrl - 8 : yabai -m space --focus 8
ctrl - 9 : yabai -m space --focus 9

# fast move desktop
shift + ctrl - x : yabai -m space --move recent
shift + ctrl - l : yabai -m space --move next 
shift + ctrl - h : yabai -m space --move prev
shift + ctrl - 1 : yabai -m space --move 1
shift + ctrl - 2 : yabai -m space --move 2
shift + ctrl - 3 : yabai -m space --move 3
shift + ctrl - 4 : yabai -m space --move 4
shift + ctrl - 5 : yabai -m space --move 5
shift + ctrl - 6 : yabai -m space --move 6
shift + ctrl - 7 : yabai -m space --move 7
shift + ctrl - 8 : yabai -m space --move 8
shift + ctrl - 9 : yabai -m space --move 9

# send window to desktop and follow focus
shift + ctrl + cmd - x : yabai -m window --space recent; yabai -m space --focus recent
shift + ctrl + cmd - l : yabai -m window --space next; yabai -m space --focus next
shift + ctrl + cmd - h : yabai -m window --space prev; yabai -m space --focus prev
shift + ctrl + cmd - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + ctrl + cmd - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + ctrl + cmd - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + ctrl + cmd - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + ctrl + cmd - 5 : yabai -m window --space 5; yabai -m space --focus 5
shift + ctrl + cmd - 6 : yabai -m window --space 6; yabai -m space --focus 6
shift + ctrl + cmd - 7 : yabai -m window --space 7; yabai -m space --focus 7
shift + ctrl + cmd - 8 : yabai -m window --space 8; yabai -m space --focus 8
shift + ctrl + cmd - 9 : yabai -m window --space 9; yabai -m space --focus 9

# toggle window zoom
alt - d : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip
